<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamic">
    <!--  查询员工，要求：携带了哪个字段查询条件就带上这个字段的值  -->
    <!--    public List<Employee> getEmpsByConditionIf(Employee e)-->
    <select id="getEmpsByConditionIf" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee
        <!-- test:判断表达式(使用OGNL) 从传递的参数中取值进行判断
             遇见特殊符号，应该使用转义字符 " -> &quot;
        -->
        <where>
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null and lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                and email=#{email}
            </if>
            <!-- OGNL会进行字符串与数字的转换判断 "0"==0 -->
            <if test="gender==0 or gender==1">
                and gender=#{gender};
            </if>
        </where>
    </select>


    <!--    public List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee
        <!-- test:判断表达式(使用OGNL) 从传递的参数中取值进行判断
             遇见特殊符号，应该使用转义字符 " -> &quot;
        -->
        <!-- 自定义字符串截取规则 -->
        <!-- 后面多出的and或者or where标签不能解决
        trim:中
            prefix：前缀：trim标签中整个字符串拼串后的结果
                    prefix给拼串后的整个字符串加一个前缀
            prefixOverrides:前缀覆盖：去掉整个字符串前面多余的字符
            suffix：后缀：给拼串后的字符串加一个后缀
            suffixOverrides：后缀覆盖：去掉整个字符串后面多余的字符
        -->
        <trim prefix="where" prefixOverrides="" suffix="" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null and lastName!=&quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email=#{email} and
            </if>
            <!-- OGNL会进行字符串与数字的转换判断 "0"==0 -->
            <if test="gender==0 or gender==1">
                gender=#{gender};
            </if>
        </trim>
    </select>

<!--    //根据某一个属性值进行查询-->
<!--    public List<Employee> getEmpsByConditionChoose(Employee employee)-->
    <select id="getEmpsByConditionChoose" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee
        <where>
            <choose>
                <when test="id!=null"> id=#{id}</when>
                <when test="lastName!=null">last_name=#{lastName}</when>
                <when test="email!=null">email=#{email}</when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>


<!--    //员工更新方法 哪些字段具有非null属性则进行改属性更新-->
<!--    public void updateEmp(Employee employee);-->
    <update id="updateEmp">
        <!--使用trim标签的方式
        update tbl_employee
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </trim>
        where id=#{id}
        -->
        <!-- 使用set标签的情况-->
        update tbl_employee
        <set>
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{emai},
            </if>
            <if test="gender!=null">
                gender=#{gender},
            </if>
        </set>
        where id=#{id}
    </update>

    <!--  传入多个id查询数据  -->
    <!--    public List<Employee> getEmpsByConditionForeach(List<Integer> ids);-->
    <select id="getEmpsByConditionForeach" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id in
        <!--
        collection:指定要遍历的集合
            list类型的参数或数组，Mybatis会特殊处理将其封装在map中，map的key就叫做“list”，数组实例会使用“array”作为健
        item:将会遍历出的元素赋值给指定的变量，#{变量名}就能取出变量的值，也就是当前遍历出的元素
        separator:每个元素之间的分隔符
        open:为遍历出所有结果拼接一个开始的字符
        close:为遍历出的所有结果拼接一个结束的字符
        index:索引。遍历list的时候index是索引，item就是当前值
                   遍历map的时候index表示的就是map的key，item就是map的值
        -->
    <!-- 未使用注解的方式
        <foreach collection="list" item="item_id" separator="," open="(" close=")" >-->
    <!-- 使用注解的方法 -->
    <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!-- 批量保存   -->
    <!-- 传入多个Employee进行保存-->
    <!-- public void addEmps(@Param("emps") List<Employee> emps);-->
    <!--  方法一：MySQL下批量保存：可以foreach遍历，mysql支持values(),(),()语法  -->
<!--    <insert id="addEmps">-->
<!--        insert into tbl_employee(last_name,email,gender,d_id)-->
<!--        values-->
<!--        <foreach collection="emps" item="emp" separator=",">-->
<!--            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})-->
<!--        </foreach>-->
<!--    </insert>-->

    <!-- 方法二：多条SQL执行
    这种方式需要数据库allowMultiQueries=true的支持
    -->
    <insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            insert into tbl_employee(last_name,email,gender,d_id)
            values (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
        </foreach>
    </insert>

<!--    //测试内置参数-->
<!--    public List<Employee> getEmpsTestInnerParameter(Employee employee);-->
    <select id="getEmpsTestInnerParameter" resultMap="com.atguigu.mybatis.bean.Employee">
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <!-- 测试输入的数据是否为空 使用_parameter-->
            <if test="_parameter!=null">
                where last_name = #{lastName}
            </if>
        </if>
        <if test="_databaseId='oracle'">
            select * from employee
        </if>
    </select>
</mapper>