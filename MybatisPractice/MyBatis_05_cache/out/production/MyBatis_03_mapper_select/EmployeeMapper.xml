<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace 名称空间 指定为接口的全类名，将接口与配置文件动态绑定-->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">

    <!--  id:唯一标识
    resultType:返回值类型（封装成XXX类型对象）
    #{id}：从传递过来的参数中取出id值
     -->

<!--    public Map<String,Object> getEmpByIdReturnMap(Integer id)
-->
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id=#{id}
    </select>

    <!--    public Map<Integer,Employee> getEmpByLastNameLikeReturnMap(String lastName);-->
    <select id="getEmpByLastNameLikeReturnMap" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <!--    public List<Employee> getEmpsByLastNameLike(String lastName); -->
    <!-- resultType:如果返回的是一个集合，要写集合中的元素类型   -->
    <select id="getEmpsByLastNameLike" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>


    <!--    public Employee getEmpByMap(Map<String,Object> map)-->
    <select id="getEmpByMap" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>

    <!--  public Employee getEmpById(Integer id)  -->
    <!-- 将select标签中的id设置为接口中的方法的名字 将方法与select语句绑定 -->
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id = #{id}
    </select>

    <!-- public Employee getEmployeeByIdAndLastName(Integer id,String lastName) -->
    <select id="getEmployeeByIdAndLastName" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id=#{param1} and last_name=#{param2}
    </select>

    <!-- public Employee getEmployeeByIdAndLastNameTwo(@Param("id") Integer id, @Param("lastName") String lastName) -->
    <select id="getEmployeeByIdAndLastNameTwo" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>
    <!--      public void addEmp(Employee employee)-->
    <!--  mysql支持自增主键，自增主键获取，mybatis也是利用了statement.getGeneratedKeys()
        通过useGeneratedKyes标签 useGeneratedKeys="true" 使用自增主键获取主键值策略
        keyProperty：指定对应的主键属性，也就是mybatis获取到主键值后，将这个值封装到javaBean的哪个属性-->
    <insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into tbl_employee(last_name,email,gender)
        values(#{lastName},#{email},#{gender})
    </insert>

    <!--  oracle不支持自增主键，Oracle使用序列来模拟自增
        每次插入的数据是从序列中拿到的值，获取改值：
  -->
    <insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee" databaseId="oracle">
    <!-- 编写查询主键的sql语句
        id:把主键给封装给javaBean的哪个属性
        oreder="before":当前sql在插入sql之前运行
        resultType：当前执行语句的返回类型
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
        select EMPLOYEES_SEQ.nextval from dual
    </selectKey>
    <!--插入时的主键是从序列中拿到的 -->
        insert into tbl_employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email})
    </insert>

    <!--    public void updateEmp(Employee employee)-->
    <update id="updateEmp">
        update tbl_employee
        set last_name=#{lastName},email=#{email},gender=#{gender}
        where id=#{id}
    </update>
    <!--    public void deleteEmpById(Integer id)-->
    <delete id="deleteEmpById" >
        delete from tbl_employee where id=#{id}
    </delete>


</mapper>